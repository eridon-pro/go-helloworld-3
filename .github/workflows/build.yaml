name: "CI Pipeline"

on:
  push:
    branches:
      - main

jobs:
  Build:
    # [skip ci] を含むコミットはこのジョブをトリガーしない
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      # モジュール依存を確実に解決（失敗回避）
      - name: Ensure dependencies
        run: |
          go mod tidy
          go mod download

      # 2. 静的解析：GolangCI-Lint を実行
      - name: Run GolangCI-Lint
        #uses: golangci/golangci-lint-action@v3
        uses: golangci/golangci-lint-action@main
        #with:
          #version: v1.50.1
          #version: latest
          #skip-cache: true
        env:
          GO111MODULE: "on"

      # 3. テストの実行
      - name: Run tests
        run: go test -v ./...

      # 4. GoSec によるセキュリティスキャン
      - name: Run GoSec Security Scanner
        uses: securego/gosec@master
        with:
          # GoSec の引数を指定（プロジェクト全体をスキャン）
          args: ./...

      # 5. OWASP Dependency Check による SCA スキャン
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "go-helloworld-3"
          path: "."
          format: "ALL"
          # 脆弱性の CVSS が 7.0 以上の場合はビルドを失敗させる設定（必要に応じて変更可）
          args: >
            --failOnCVSS 7
            --enableRetired

      # 6. GitHub Container Registry (ghcr.io) へのログイン
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Docker Buildx のセットアップ（マルチプラットフォーム対応）
      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      # 8. docker/metadata-action でタグとdigestを自動生成
      - id: docker_meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: ghcr.io/eridon-pro/go-helloworld-3
          tags: type=sha,format=long

      # 9. Docker イメージのビルド＆プッシュ
      #- name: Build and Publish
      #  run: |
      #    docker buildx build \
      #      --push \
      #      --platform linux/arm/v7,linux/amd64 \
      #      -t ghcr.io/eridon-pro/go-helloworld-3:${{ github.sha }} \
      #      -t ghcr.io/eridon-pro/go-helloworld-3:latest \
      #      .

      # 9. Docker イメージのビルド＆プッシュ（コミットSHAタグと latest タグを付与）
      - name: Build and Publish container images
        id: build-and-push
        uses: docker/build-push-action@v6.14.0
        with:
          platforms: linux/arm/v7,linux/amd64
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/eridon-pro/go-helloworld-3:latest

      # 10. Cosign のインストール
      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      # 11. GitHub OIDC トークンを利用した署名（コミットSHAタグのイメージに対して）
      - name: Sign commit SHA image with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAG: ghcr.io/eridon-pro/go-helloworld-3:${{ github.sha }}
        run: |
          # DIGEST と TAG を組み合わせて署名
          cosign sign --yes ${TAG}@${DIGEST}

      # 12. Trivy によるイメージスキャン
      - name: Scan Docker Image with Trivy
        # Latest as of 20250320
        #uses: aquasecurity/trivy-action@0.30.0
        uses: aquasecurity/trivy-action@master
        with:
          #image-ref: ghcr.io/eridon-pro/go-helloworld-3:${{ github.sha }}
          image-ref: ghcr.io/eridon-pro/go-helloworld-3:sha-${{ github.sha }}
          format: table
          exit-code: '1'
          severity: HIGH,CRITICAL

      # 13. 一時的にコンテナを起動し、DASTスキャン（OWASP ZAP）を実行
      - name: Start app container for DAST
        run: |
          docker run -d -p 8080:8080 --name testapp ghcr.io/eridon-pro/go-helloworld-3:sha-${{ github.sha }}
          sleep 10  # アプリ起動待ち（必要に応じて延長）

      - name: Run OWASP ZAP Baseline DAST Scan
        #uses: zaproxy/action-baseline@v0.14.0
        uses: zaproxy/action-baseline@master
        with:
          target: 'http://localhost:8080/hello'
          #rules_file_name: .zap-rules.tsv  # 無視ルール（任意）
          fail_action: true
          #docker_name: 'owasp/zap2docker-stable' # Default docker image (can be ommited)

      - name: Stop app container
        if: always()
        run: docker rm -f testapp

      # 14. SBOM の生成（Anchore sbom-action を利用）
      - name: Generate SBOM with Anchore SBOM Action
        uses: anchore/sbom-action@main
        with:
          image: ghcr.io/eridon-pro/go-helloworld-3:sha-${{ github.sha }}
          output_format: cyclonedx-json
          output_file: sbom-${{ github.sha }}.json

      # 15. SBOM アーティファクトのアップロード
      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@main
        with:
          name: sbom
          path: sbom-sha-${{ github.sha }}.json

      # 16. マニフェストの更新
      - name: Update manifest with new image tag
        run: |
          NEW_TAG=sha-${{ github.sha }}
          MANIFEST_FILE="manifest/deployment.yaml"
          PRE_SCAN_MANIFEST_FILE="manifest/pre-sync-scan.yaml"
          # マニフェスト内の image フィールドを新しいタグに置換
          sed -i "s|ghcr.io/eridon-pro/go-helloworld-3:.*|ghcr.io/eridon-pro/go-helloworld-3:${NEW_TAG}|g" ${MANIFEST_FILE}
          sed -i "s|ghcr.io/eridon-pro/go-helloworld-3:.*|ghcr.io/eridon-pro/go-helloworld-3:${NEW_TAG}|g" ${PRE_SCAN_MANIFEST_FILE}
          git config user.name "eridon-pro"
          git config user.email "take@erikawa.com"
          git add ${MANIFEST_FILE} ${PRE_SCAN_MANIFEST_FILE}
          # コミットメッセージに [skip ci] を追加して、push による再トリガーを防止
          #git commit -m "Update deployment image tag to ${NEW_TAG}"
          git commit -m "Update deployment image tag to ${NEW_TAG} [skip ci]"
          # リモート URL を PAT を含む形に設定
          git remote set-url origin "https://${{ secrets.PAT_TOKEN }}@github.com/eridon-pro/go-helloworld-3.git"
          git push origin main

      # 17. Dependency Check レポートのアップロード
      - name: Upload Dependency Check Reports
        uses: actions/upload-artifact@main
        with:
          name: dependency-check-reports
          path: reports/

      # 18. Notify Discord on failure
      #- name: Notify Discord on failure
      #  if: failure()
      #  run: |
      #    curl -X POST -H "Content-Type: application/json" \
      #    --data '{"content": "CI pipeline for go-helloworld-3 failed! Please check the logs."}' \
      #    ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: CI Pipeline Success
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
          severity: info
          details: CI Pipeline Succeeded!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
      - name: CI Pipeline Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
          severity: error
          details: CI Pipeline Failed! Check PR Log.
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
      - name: CI Pileline Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
          severity: warn
          details: CI Pileline Cancelled!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
